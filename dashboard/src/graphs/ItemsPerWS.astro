---
const { width, height } = Astro.props;
---

<div class="chart-container">
  <div id="items-per-ws" class="chart-area"></div>
</div>

<script define:vars={{ width, height }}>
  const SVG = d3
    .select("#items-per-ws")
    .append("svg")
    .attr("viewBox", `0,0, ${width}, ${height}`);
  const group = SVG.append("g");
  const margin = { left: 50, right: 10, top: 50, bottom: 20 };

  const HEIGHT = height - margin.top - margin.bottom;
  const WIDTH = width - margin.left - margin.right;

  let x = d3.scaleLinear().range([WIDTH, 0]);
  let y = d3.scaleBand().range([HEIGHT, 0]).paddingOuter(0.1).paddingInner(0.1);

  let xAxisGroup = group
    .append("g")
    .attr("class", "x axis")
    .attr("transform", `translate(${margin.left}, ${margin.top + HEIGHT})`);

  let yAxisGroup = group
    .append("g")
    .attr("class", "x axis")
    .attr("transform", `translate(${margin.left}, ${margin.top})`);

  let idx = 0;

  const titleLabel = group
    .append("text")
    .attr("class", "label")
    .attr("x", margin.left + WIDTH / 2 - 50)
    .attr("y", margin.top / 2)
    .attr("font-size", "20px")
    .attr("text-anchor", "middle")
    .style("fill", d3.color("#000"))
    .text("Top Workstations per Day");

  const dayLabel = group
    .append("text")
    .attr("class", "label")
    .attr("x", WIDTH)
    .attr("y", HEIGHT - 40)
    .attr("font-size", "20px")
    .attr("text-anchor", "middle")
    .style("fill", d3.color("#ccc"))
    .text("Workstation");

  const numDayLabel = group
    .append("text")
    .attr("class", "label")
    .attr("x", margin.left + WIDTH / 2 + 110)
    .attr("y", margin.top / 2)
    .attr("font-size", "20px")
    .attr("text-anchor", "middle")
    .style("fill", d3.color("#ccc"))
    .text("");

  (async () => {
    const raw = await d3.csv("/data/results.csv");
    const formatted = raw.map((row) => {
      const { Day } = row;
      const Workstation = row["Work Station"].slice(0, 5);
      const TotalItems = +row["Total items"];
      return { Day, Workstation, TotalItems };
    });

    const daysItems = {};

    formatted.forEach((row) => {
      const key = `Day${row.Day}`;
      if (daysItems[key] === undefined) {
        daysItems[key] = {};
      }
      if (daysItems[key][row.Workstation] === undefined) {
        daysItems[key][row.Workstation] = 0;
      }
      daysItems[key][row.Workstation] += row.TotalItems;
    });

    const dayKeys = Object.keys(daysItems);

    d3.interval(() => {
      const dayKey = dayKeys[idx];
      const data = Object.entries(daysItems[dayKey]).map(([ws, totalItems]) => {
        return { ws, totalItems };
      });
      const sorted = data.sort((a, b) => {
        return a.totalItems - b.totalItems;
      });
      updateData(sorted.slice(0, 10));
      numDayLabel.text(dayKey);
      idx = (idx + 1) % dayKeys.length;
    }, 500);
  })();

  function updateData(data) {
    let maxItems = 0;
    const names = data.map((d) => d.ws);

    data.forEach((dt) => {
      if (dt.totalItems > maxItems) maxItems = dt.totalItems;
    });

    x.domain([maxItems, 0]);
    y.domain(names);

    const tran = d3.transition().duration(500);
    const rects = group.selectAll("rect").data(data);

    rects.exit().transition(tran).remove();

    rects
      .transition(tran)
      .attr("y", (d) => {
        return y(d.ws) + margin.top;
      })
      .attr("x", margin.left + 2)
      .attr("height", y.bandwidth())
      .attr("width", (d) => {
        return x(d.totalItems);
      });

    rects
      .enter()
      .append("rect")
      .transition(tran)
      .attr("y", (d) => {
        return y(d.ws) + margin.top;
      })
      .attr("x", margin.left + 2)
      .attr("width", (d) => {
        return x(d.totalItems);
      })
      .attr("height", y.bandwidth())
      .attr("fill", d3.color("#0099FF"));

    const xAxisCall = d3.axisBottom(x).ticks(4);
    const yAxisCall = d3.axisLeft(y).tickValues(names);

    xAxisGroup.transition(tran).call(xAxisCall);
    yAxisGroup.transition(tran).call(yAxisCall);
  }
</script>
