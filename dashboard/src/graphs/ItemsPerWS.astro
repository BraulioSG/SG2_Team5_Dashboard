---
const { width, height } = Astro.props;
---

<div class="chart-container">
  <div id="items-per-ws" class="chart-area"></div>
</div>

<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
<link
  rel="stylesheet"
  href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"
/>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"
></script>

<script define:vars={{ width, height }}>
  let interval,
    playing = false;

  const colorScale = d3.scaleOrdinal([
    Colors.RED,
    Colors.ORANGE,
    Colors.BLUE,
    Colors.GREEN,
    Colors.YELLOW,
    Colors.GREY,
    Colors.BLACK,
  ]);

  const SVG = d3
    .select("#items-per-ws")
    .append("svg")
    .attr("viewBox", `0,0, ${width}, ${height}`);
  const group = SVG.append("g");
  const margin = { left: 50, right: 10, top: 50, bottom: 20 };
  const HEIGHT = height - margin.top - margin.bottom;
  const WIDTH = width - margin.left - margin.right;
  const x = d3.scaleLinear().range([WIDTH, 0]);
  const y = d3
    .scaleBand()
    .range([HEIGHT, 0])
    .paddingOuter(0.1)
    .paddingInner(0.1);
  const xAxisGroup = group
    .append("g")
    .attr("class", "x axis")
    .attr("transform", `translate(${margin.left}, ${margin.top + HEIGHT})`);
  const yAxisGroup = group
    .append("g")
    .attr("class", "x axis")
    .attr("transform", `translate(${margin.left}, ${margin.top})`);
  const titleLabel = group
    .append("text")
    .attr("x", margin.left + WIDTH / 2)
    .attr("y", margin.top / 2)
    .attr("font-size", "20px")
    .attr("text-anchor", "middle")
    .text("Total Items per Workstations");

 const dayKeyLabel = group
    .append("text")
    .attr("x", margin.left + WIDTH / 2)
    .attr("y", margin.top / 2 + 25)
    .attr("font-size", "16px")
    .attr("text-anchor", "middle")
    .text("day1");
  let idx = 0;
  let dayKeys = [];


  function update(data, currentDay) {
    let maxItems = 0;
    data.forEach((d) => {
      if (d.totalItems > maxItems) maxItems = d.totalItems;
    });
    x.domain([maxItems, 0]);
    y.domain(data.map((d) => d.ws));
    const t = d3.transition().duration(500);
    const rects = group.selectAll("rect").data(data);
    rects.exit().transition(t).remove();
    rects
      .transition(t)
      .attr("y", (d) => y(d.ws) + margin.top)
      .attr("x", margin.left + 2)
      .attr("height", y.bandwidth())
      .attr("width", (d) => x(d.totalItems))
      .attr("fill", (d) => colorScale(d.ws));

    rects
      .enter()
      .append("rect")
      .transition(t)
      .attr("y", (d) => y(d.ws) + margin.top)
      .attr("x", margin.left + 2)
      .attr("width", (d) => x(d.totalItems))
      .attr("height", y.bandwidth())
      .attr("fill", (d) => colorScale(d.ws));

    xAxisGroup.transition(t).call(d3.axisBottom(x).ticks(4));
    yAxisGroup.transition(t).call(d3.axisLeft(y));
    dayKeyLabel.text(currentDay);
  }

  function step(daysItems) {
    idx = (idx + 1) % dayKeys.length;
    const dayKey = dayKeys[idx];
    const rawData = Object.entries(daysItems[dayKey]).map(([ws, t]) => ({
      ws: ws.slice(0, 5),
      totalItems: t,
    }));
    const sorted = rawData.sort((a, b) => a.totalItems - b.totalItems);
    update(sorted.slice(0, 10), dayKey);
  }

  const slider = document.querySelector("input[type=range]#itemsperws-range");


  (async () => {
    const raw = await d3.csv("/data/results.csv");
    const daysItems = {};
    raw.forEach((r) => {
      const k = "Day" + r.Day;
      if (!daysItems[k]) daysItems[k] = {};
      if (!daysItems[k][r["Work Station"]]) daysItems[k][r["Work Station"]] = 0;
      daysItems[k][r["Work Station"]] += +r["Total items"];
    });
    dayKeys = Object.keys(daysItems);

    slider.addEventListener("input", () => {
        idx = slider.value;
        const firstKey = dayKeys[idx];
        const initial = Object.entries(daysItems[firstKey]).map(([ws, t]) => ({
          ws: ws.slice(0, 5),
          totalItems: t,
        }));
        const sorted = initial.sort((a, b) => a.totalItems - b.totalItems);
        slider.value = idx;
        update(sorted.slice(0, 10), firstKey);
    })
    d3.interval(() => {
        if(sessionStorage.getItem("itemsperws-pause") === "true") return;
        const firstKey = dayKeys[idx];
        const initial = Object.entries(daysItems[firstKey]).map(([ws, t]) => ({
          ws: ws.slice(0, 5),
          totalItems: t,
        }));
        const sorted = initial.sort((a, b) => a.totalItems - b.totalItems);
        slider.value = idx;
        update(sorted.slice(0, 10), firstKey);
        idx++;
    }, 1000);
  })();
</script>
