---
const { width, height } = Astro.props;
---
<style define:vars={{width, height}}>
    #time-graph{
        width: var(--width);
        height: var(--height);
    }
</style>

<div id="downtime-graph">
    <!---h2 id = "dayLabel">Day: 1</h2>
    <input type="range" min="1" max="100" value="1" class="slider" id="dayRange"-->
    <select id="work-station-select">
        <option>Company level</option>
        <option>WS#1@PL#1</option>
        <option>WS#2@PL#1</option>
        <option>WS#3@PL#1</option>
        <option>WS#4@PL#1</option>
        <option>WS#5@PL#1</option>
        <option>WS#6@PL#1</option>
    </select>
    <div id="time-graph"></div>
</div>

<script define:vars={{width, height}}>

    //Define D3 variables
    const margin = { left: 100, right: 10, top: 10, bottom: 100};
    const SVG = d3.select("#time-graph").append("svg").attr("width", width).attr("height", height);
    const group = SVG.append("g").attr("transform", `translate(${margin.left}, ${margin.top})`);;

    const HEIGHT = height - margin.top - margin.bottom;
    const WIDTH = width - margin.left - margin.right;

    //Define plot variables
    var x = d3.scaleLinear().range([0, WIDTH]);
    var y = d3.scaleLinear().range([HEIGHT, 0]);
    var area = d3.scaleLinear().range([15 * Math.PI, 150 * Math.PI]);

    var xKey = "Total items";
    var yKey = "Downtime";
    var areaKey = "Approved items";

    //Define axis variables
    var bottomAxis = d3.axisBottom(x);
    var leftAxis = d3.axisLeft(y);

    var bottomAxisGroup = group.append("g")
        .attr("class", "bottom axis")
        .attr("transform", "translate(0, " + HEIGHT + ")")
    var leftAxisGroup = group.append("g")
        .attr("class", "left axis")
        .attr("height", HEIGHT)

    //Define Slider variables
    let slider = document.getElementById("dayRange");
    let dayLabel = document.getElementById("dayLabel");
    let day = 1;

    //Define color palette
    const customColors = ["#8CB369", "#F4E285", "#F4A259", "#5B8E7D", "#BC4B51", "#8a95cc"];
    const allStations = [
        "WS#1@PL#1",
        "WS#2@PL#1",
        "WS#3@PL#1",
        "WS#4@PL#1",
        "WS#5@PL#1",
        "WS#6@PL#1"
    ];

    const color = d3.scaleOrdinal()
        .domain(allStations)
        .range(customColors);

    //Define filter variables
    let filterSelect = document.getElementById("work-station-select");

    //Updates the graph
    function update(data){
        const t = d3.transition().duration(150);

        //Filter data
        var levelFilter = filterSelect.value;
        if(levelFilter != "Company level"){
            data = data.filter(d => {
                console.log(`${d["Work Station"].trim().toLowerCase()} vs ${levelFilter.trim().toLowerCase()} = ${d["Work Station"].trim().toLowerCase() === levelFilter.trim().toLowerCase()}`);
                return d["Work Station"].trim().toLowerCase() === levelFilter.trim().toLowerCase();
            })
        }
        data = data.filter(d => {
            return d["Day"] <= day;
        });
        data = data.filter(d => d[xKey] > 0 && !isNaN(d[xKey]) && !isNaN(d[yKey]));

        x.domain([0, 1000]);
        y.domain([0, 5000]);
        area.domain(d3.extent(data, d =>  d[areaKey]));

        //Updates circles
        var circles = group.selectAll("circle").data(data);
        circles.exit().remove();

        circles.transition(t)
            .attr("cx", d => x(d[xKey]))
            .attr("cy", d => y(d[yKey]))
            .attr("r", d => Math.sqrt(area(d[areaKey]) / Math.PI))
            //.attr("r", d => 10)
            .attr("fill", d => {
                const rgbColor = color(d["Work Station"]);
                return `rgba(${d3.rgb(rgbColor).r}, ${d3.rgb(rgbColor).g}, ${d3.rgb(rgbColor).b}, 0.5)`;  // 0.5 is the transparency level
            });

        circles.enter().append("circle").transition(t)
            .attr("cx", d => x(d[xKey]))
            .attr("cy", d => y(d[yKey]))
            .attr("r", d => Math.sqrt(area(d[areaKey]) / Math.PI))
            //.attr("r", d => 10)
            .attr("fill", d => {
                const rgbColor = color(d["Work Station"]);
                return `rgba(${d3.rgb(rgbColor).r}, ${d3.rgb(rgbColor).g}, ${d3.rgb(rgbColor).b}, 0.5)`;  // 0.5 is the transparency level
            });

        //Update axis groups
        bottomAxisGroup.transition(t).call(bottomAxis)
            .selectAll("text")
            .attr("x", -5)
            .attr("y", 10)
            .attr("text-anchor", "end")
            .attr("transform", "rotate(-40)")
            .attr("font-size", "12px");

        leftAxisGroup.transition(t).call(leftAxis);

    }

    // Create the legend
    let legendContainer = SVG.selectAll("g#legend-container").data([null]);

    legendContainer = legendContainer.enter()
        .append("g")
        .attr("id", "legend-container")
        .merge(legendContainer);

    legendContainer.selectAll("*").remove();

    const legendGroup = legendContainer.selectAll(".legend")
        .data(color.domain())
        .enter().append("g")
        .attr("class", "legend")
        .attr("transform", (d, i) => `translate(${WIDTH + 30}, ${30 + i * 12})`);

    legendGroup.append("rect")
        .attr("width", 10)
        .attr("height", 10)
        .attr("fill", d => color(d));

    legendGroup.append("text")
        .attr("x", 14)
        .attr("y", 5)
        .attr("dy", "0.35em")
        .text(d => d)
        .attr("font-size", "9px");

    //Loads and processes data
    (async ()=>{
        //Loads data and sets up the values that are going to be used as numbers
        const data = await d3.csv("/data/results.csv", d => ({
            ...d,
            [xKey]: +d[xKey],
            [yKey]: +d[yKey],
            [areaKey]: +d[areaKey],
            ["Day"]: +d["Day"],
        }));

        //Changes DAY when slider is changed
        /*
        slider.oninput = function(){
            day = this.value;
            dayLabel.innerHTML = `Day: ${day}`;
            update(data);
        }*/

        filterSelect.onchange = function(){
            update(data);
        }

        d3.interval( () => {
            day = (day + 1) % 101;
            update(data)
        }, 500);
        update(data);
    })()

    //Draw graph axis titles
    group.append("text")
        .attr("x", WIDTH / 2)
        .attr("y", HEIGHT + 90)
        .attr("text-anchor", "middle")
        .attr("font-size", "20px")
        .text(xKey);

    group.append("text")
        .attr("x", -(HEIGHT) / 2)
        .attr("y", -60)
        .attr("text-anchor", "middle")
        .attr("transform", "rotate(-90)")
        .attr("font-size", "20px")
        .text(yKey);
</script>
