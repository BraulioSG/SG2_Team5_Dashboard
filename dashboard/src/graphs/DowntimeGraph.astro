---
const { width, height } = Astro.props;
---
<div class="chart-container">
    <div id="downtime-graph" class="chart-area"></div> 
</div>

<script define:vars={{width, height}}>
    const SVG = d3.select("#downtime-graph").append("svg").attr("viewBox", `0,0, ${width}, ${height}`);
    const group = SVG.append("g");
    const margin = { left: 50, right: 10, top: 50, bottom: 20};

    const HEIGHT = height - margin.top - margin.bottom;
    const WIDTH = width - margin.left - margin.right;
    
    let x = d3.scaleLinear().range([WIDTH, 0]);
    let y = d3.scaleBand().range([HEIGHT, 0]).paddingOuter(0.1).paddingInner(0.1);

    let xAxisGroup = group.append("g").attr("class", "x axis").attr("transform", `translate(${margin.left}, ${margin.top + HEIGHT})`);

    let yAxisGroup = group.append("g").attr("class", "x axis").attr("transform", `translate(${margin.left}, ${margin.top})`);

    let idx = 0; 

    const titleLabel= group.append("text").attr("class", "label")
        .attr("x", margin.left + (WIDTH / 2))
        .attr("y", margin.top / 2)
        .attr("font-size", "20px")
        .attr("text-anchor", "middle")
        .style("fill", d3.color(Colors.BLACK))
        .text("Top 10 Days With Downtimes");
        
    const dayLabel = group.append("text").attr("class", "label")
        .attr("x", WIDTH)
        .attr("y", HEIGHT - 40)
        .attr("font-size", "20px")
        .attr("text-anchor", "middle")
        .style("fill", d3.color(Colors.GREY))
        .text("Day");

    const numDayLabel = group.append("text").attr("class", "label")
        .attr("x", WIDTH)
        .attr("y", HEIGHT)
        .attr("font-size", "40px")
        .attr("text-anchor", "middle")
        .style("fill", d3.color(Colors.GREY))
        .text("0");


    let stop = false;

    (async ()=>{
        const raw = await d3.csv("/data/results.csv")

        // row -> { day, worktation, downtime } 
        const formatted = raw.map(row => {
            const { Day , Downtime } = row;
            const Workstation = row["Work Station"];

            return { Day, Workstation, Downtime}
        })

        const daysDowntime = {}


        formatted.forEach(row => {
            const key = `day${row.Day}`;
            if(daysDowntime[key] === undefined){
                daysDowntime[key] = { downtime: +row.Downtime, day: key}
            }
            else{
                daysDowntime[key]["downtime"] += +row.Downtime;
            }
        }) 

        d3.interval(() => {
            if(stop) return;

            const data = Object.values(daysDowntime);
            const sliced = data.slice(0, idx + 1);
            const sorted = sliced.sort((a,b) => {
                return a.downtime - b.downtime
            });
            updateData(sorted.slice(0, Math.min(idx, 10)));
            numDayLabel.text(idx + 1);
            idx++;
            if(idx >= data.length){
                stop = true;
            }
        }, 1000);

    })()

    function updateData(data){
        let maxDowntime = 0;
        const names = data.map(d => d.day);
        
        data.forEach(dt => {
            if(dt.downtime > maxDowntime)
                maxDowntime = dt.downtime;
        })


        x.domain([maxDowntime, 0]);
        y.domain(names);

        const tran = d3.transition().duration(500);
        const rects = group.selectAll("rect").data(data);
        
        rects.exit().transition(tran).remove();

        rects.transition(tran)
            .attr("y", (d) => { return y(d.day) + margin.top })
            .attr("x", margin.left + 2)
            .attr("height", y.bandwidth())
            .attr("width", (d) => { return x(d.downtime) }) ;

        rects.enter().append("rect").transition(tran)
            .attr("y", (d) => { return y(d.day) + margin.top})
            .attr("x", margin.left + 2)
            .attr("width", (d) => { return x(d.downtime)}) 
            .attr("height", y.bandwidth())
            .attr("fill", d3.color(Colors.BLUE));

        const xAxisCall = d3.axisBottom(x).ticks(4);
        const yAxisCall = d3.axisLeft(y).tickValues(names);

        xAxisGroup.transition(tran).call(xAxisCall);
        yAxisGroup.transition(tran).call(yAxisCall);
        
    }
</script>
